// Autogenerated from Pigeon (v3.2.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "ZendeskPigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface SetLoggableRequest ()
+ (SetLoggableRequest *)fromMap:(NSDictionary *)dict;
+ (nullable SetLoggableRequest *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface SupportSDKInitializeRequest ()
+ (SupportSDKInitializeRequest *)fromMap:(NSDictionary *)dict;
+ (nullable SupportSDKInitializeRequest *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ChatSDKV2InitializeRequest ()
+ (ChatSDKV2InitializeRequest *)fromMap:(NSDictionary *)dict;
+ (nullable ChatSDKV2InitializeRequest *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface SetVisitorInfoRequest ()
+ (SetVisitorInfoRequest *)fromMap:(NSDictionary *)dict;
+ (nullable SetVisitorInfoRequest *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface VisitorTagsRequest ()
+ (VisitorTagsRequest *)fromMap:(NSDictionary *)dict;
+ (nullable VisitorTagsRequest *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface VisitorNoteRequest ()
+ (VisitorNoteRequest *)fromMap:(NSDictionary *)dict;
+ (nullable VisitorNoteRequest *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation SetLoggableRequest
+ (instancetype)makeWithLoggable:(NSNumber *)loggable {
  SetLoggableRequest* pigeonResult = [[SetLoggableRequest alloc] init];
  pigeonResult.loggable = loggable;
  return pigeonResult;
}
+ (SetLoggableRequest *)fromMap:(NSDictionary *)dict {
  SetLoggableRequest *pigeonResult = [[SetLoggableRequest alloc] init];
  pigeonResult.loggable = GetNullableObject(dict, @"loggable");
  NSAssert(pigeonResult.loggable != nil, @"");
  return pigeonResult;
}
+ (nullable SetLoggableRequest *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [SetLoggableRequest fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"loggable" : (self.loggable ?: [NSNull null]),
  };
}
@end

@implementation SupportSDKInitializeRequest
+ (instancetype)makeWithZendeskUrl:(NSString *)zendeskUrl
    appId:(NSString *)appId
    clientId:(NSString *)clientId {
  SupportSDKInitializeRequest* pigeonResult = [[SupportSDKInitializeRequest alloc] init];
  pigeonResult.zendeskUrl = zendeskUrl;
  pigeonResult.appId = appId;
  pigeonResult.clientId = clientId;
  return pigeonResult;
}
+ (SupportSDKInitializeRequest *)fromMap:(NSDictionary *)dict {
  SupportSDKInitializeRequest *pigeonResult = [[SupportSDKInitializeRequest alloc] init];
  pigeonResult.zendeskUrl = GetNullableObject(dict, @"zendeskUrl");
  NSAssert(pigeonResult.zendeskUrl != nil, @"");
  pigeonResult.appId = GetNullableObject(dict, @"appId");
  NSAssert(pigeonResult.appId != nil, @"");
  pigeonResult.clientId = GetNullableObject(dict, @"clientId");
  NSAssert(pigeonResult.clientId != nil, @"");
  return pigeonResult;
}
+ (nullable SupportSDKInitializeRequest *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [SupportSDKInitializeRequest fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"zendeskUrl" : (self.zendeskUrl ?: [NSNull null]),
    @"appId" : (self.appId ?: [NSNull null]),
    @"clientId" : (self.clientId ?: [NSNull null]),
  };
}
@end

@implementation ChatSDKV2InitializeRequest
+ (instancetype)makeWithAccountKey:(NSString *)accountKey
    appId:(NSString *)appId
    pushToken:(NSString *)pushToken {
  ChatSDKV2InitializeRequest* pigeonResult = [[ChatSDKV2InitializeRequest alloc] init];
  pigeonResult.accountKey = accountKey;
  pigeonResult.appId = appId;
  pigeonResult.pushToken = pushToken;
  return pigeonResult;
}
+ (ChatSDKV2InitializeRequest *)fromMap:(NSDictionary *)dict {
  ChatSDKV2InitializeRequest *pigeonResult = [[ChatSDKV2InitializeRequest alloc] init];
  pigeonResult.accountKey = GetNullableObject(dict, @"accountKey");
  NSAssert(pigeonResult.accountKey != nil, @"");
  pigeonResult.appId = GetNullableObject(dict, @"appId");
  NSAssert(pigeonResult.appId != nil, @"");
  pigeonResult.pushToken = GetNullableObject(dict, @"pushToken");
  NSAssert(pigeonResult.pushToken != nil, @"");
  return pigeonResult;
}
+ (nullable ChatSDKV2InitializeRequest *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ChatSDKV2InitializeRequest fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"accountKey" : (self.accountKey ?: [NSNull null]),
    @"appId" : (self.appId ?: [NSNull null]),
    @"pushToken" : (self.pushToken ?: [NSNull null]),
  };
}
@end

@implementation SetVisitorInfoRequest
+ (instancetype)makeWithName:(nullable NSString *)name
    email:(nullable NSString *)email
    phoneNumber:(nullable NSString *)phoneNumber {
  SetVisitorInfoRequest* pigeonResult = [[SetVisitorInfoRequest alloc] init];
  pigeonResult.name = name;
  pigeonResult.email = email;
  pigeonResult.phoneNumber = phoneNumber;
  return pigeonResult;
}
+ (SetVisitorInfoRequest *)fromMap:(NSDictionary *)dict {
  SetVisitorInfoRequest *pigeonResult = [[SetVisitorInfoRequest alloc] init];
  pigeonResult.name = GetNullableObject(dict, @"name");
  pigeonResult.email = GetNullableObject(dict, @"email");
  pigeonResult.phoneNumber = GetNullableObject(dict, @"phoneNumber");
  return pigeonResult;
}
+ (nullable SetVisitorInfoRequest *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [SetVisitorInfoRequest fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"name" : (self.name ?: [NSNull null]),
    @"email" : (self.email ?: [NSNull null]),
    @"phoneNumber" : (self.phoneNumber ?: [NSNull null]),
  };
}
@end

@implementation VisitorTagsRequest
+ (instancetype)makeWithTags:(NSArray<NSString *> *)tags {
  VisitorTagsRequest* pigeonResult = [[VisitorTagsRequest alloc] init];
  pigeonResult.tags = tags;
  return pigeonResult;
}
+ (VisitorTagsRequest *)fromMap:(NSDictionary *)dict {
  VisitorTagsRequest *pigeonResult = [[VisitorTagsRequest alloc] init];
  pigeonResult.tags = GetNullableObject(dict, @"tags");
  NSAssert(pigeonResult.tags != nil, @"");
  return pigeonResult;
}
+ (nullable VisitorTagsRequest *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [VisitorTagsRequest fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"tags" : (self.tags ?: [NSNull null]),
  };
}
@end

@implementation VisitorNoteRequest
+ (instancetype)makeWithNote:(NSString *)note {
  VisitorNoteRequest* pigeonResult = [[VisitorNoteRequest alloc] init];
  pigeonResult.note = note;
  return pigeonResult;
}
+ (VisitorNoteRequest *)fromMap:(NSDictionary *)dict {
  VisitorNoteRequest *pigeonResult = [[VisitorNoteRequest alloc] init];
  pigeonResult.note = GetNullableObject(dict, @"note");
  NSAssert(pigeonResult.note != nil, @"");
  return pigeonResult;
}
+ (nullable VisitorNoteRequest *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [VisitorNoteRequest fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"note" : (self.note ?: [NSNull null]),
  };
}
@end

@interface ZendeskSDKApiCodecReader : FlutterStandardReader
@end
@implementation ZendeskSDKApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [SetLoggableRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ZendeskSDKApiCodecWriter : FlutterStandardWriter
@end
@implementation ZendeskSDKApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[SetLoggableRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ZendeskSDKApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ZendeskSDKApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ZendeskSDKApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ZendeskSDKApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ZendeskSDKApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ZendeskSDKApiCodecReaderWriter *readerWriter = [[ZendeskSDKApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void ZendeskSDKApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ZendeskSDKApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ZendeskSDKApi.setLoggable"
        binaryMessenger:binaryMessenger
        codec:ZendeskSDKApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLoggableRequest:error:)], @"ZendeskSDKApi api (%@) doesn't respond to @selector(setLoggableRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SetLoggableRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLoggableRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface SupportSDKApiCodecReader : FlutterStandardReader
@end
@implementation SupportSDKApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [SupportSDKInitializeRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface SupportSDKApiCodecWriter : FlutterStandardWriter
@end
@implementation SupportSDKApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[SupportSDKInitializeRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface SupportSDKApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation SupportSDKApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[SupportSDKApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[SupportSDKApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *SupportSDKApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    SupportSDKApiCodecReaderWriter *readerWriter = [[SupportSDKApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void SupportSDKApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<SupportSDKApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.SupportSDKApi.initializeSupportSDK"
        binaryMessenger:binaryMessenger
        codec:SupportSDKApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeSupportSDKRequest:error:)], @"SupportSDKApi api (%@) doesn't respond to @selector(initializeSupportSDKRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SupportSDKInitializeRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api initializeSupportSDKRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.SupportSDKApi.setAnonymousIdentity"
        binaryMessenger:binaryMessenger
        codec:SupportSDKApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAnonymousIdentityWithError:)], @"SupportSDKApi api (%@) doesn't respond to @selector(setAnonymousIdentityWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api setAnonymousIdentityWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.SupportSDKApi.showHelpCenter"
        binaryMessenger:binaryMessenger
        codec:SupportSDKApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showHelpCenterWithError:)], @"SupportSDKApi api (%@) doesn't respond to @selector(showHelpCenterWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api showHelpCenterWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ChatSDKV2ApiCodecReader : FlutterStandardReader
@end
@implementation ChatSDKV2ApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [ChatSDKV2InitializeRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ChatSDKV2ApiCodecWriter : FlutterStandardWriter
@end
@implementation ChatSDKV2ApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[ChatSDKV2InitializeRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ChatSDKV2ApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ChatSDKV2ApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ChatSDKV2ApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ChatSDKV2ApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ChatSDKV2ApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ChatSDKV2ApiCodecReaderWriter *readerWriter = [[ChatSDKV2ApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void ChatSDKV2ApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ChatSDKV2Api> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ChatSDKV2Api.initializeChatSDK"
        binaryMessenger:binaryMessenger
        codec:ChatSDKV2ApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeChatSDKRequest:error:)], @"ChatSDKV2Api api (%@) doesn't respond to @selector(initializeChatSDKRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ChatSDKV2InitializeRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api initializeChatSDKRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ProfileProviderApiCodecReader : FlutterStandardReader
@end
@implementation ProfileProviderApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [SetVisitorInfoRequest fromMap:[self readValue]];
    
    case 129:     
      return [VisitorNoteRequest fromMap:[self readValue]];
    
    case 130:     
      return [VisitorTagsRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ProfileProviderApiCodecWriter : FlutterStandardWriter
@end
@implementation ProfileProviderApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[SetVisitorInfoRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VisitorNoteRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VisitorTagsRequest class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ProfileProviderApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ProfileProviderApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ProfileProviderApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ProfileProviderApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ProfileProviderApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ProfileProviderApiCodecReaderWriter *readerWriter = [[ProfileProviderApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void ProfileProviderApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ProfileProviderApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ProfileProviderApi.setVisitorInfo"
        binaryMessenger:binaryMessenger
        codec:ProfileProviderApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVisitorInfoRequest:error:)], @"ProfileProviderApi api (%@) doesn't respond to @selector(setVisitorInfoRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SetVisitorInfoRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setVisitorInfoRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ProfileProviderApi.addVisitorTags"
        binaryMessenger:binaryMessenger
        codec:ProfileProviderApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addVisitorTagsRequest:error:)], @"ProfileProviderApi api (%@) doesn't respond to @selector(addVisitorTagsRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VisitorTagsRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addVisitorTagsRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ProfileProviderApi.removeVisitorTags"
        binaryMessenger:binaryMessenger
        codec:ProfileProviderApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeVisitorTagsRequest:error:)], @"ProfileProviderApi api (%@) doesn't respond to @selector(removeVisitorTagsRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VisitorTagsRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api removeVisitorTagsRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ProfileProviderApi.setVisitorNote"
        binaryMessenger:binaryMessenger
        codec:ProfileProviderApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVisitorNoteRequest:error:)], @"ProfileProviderApi api (%@) doesn't respond to @selector(setVisitorNoteRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VisitorNoteRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setVisitorNoteRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ProfileProviderApi.appendVisitorNote"
        binaryMessenger:binaryMessenger
        codec:ProfileProviderApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appendVisitorNoteRequest:error:)], @"ProfileProviderApi api (%@) doesn't respond to @selector(appendVisitorNoteRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VisitorNoteRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api appendVisitorNoteRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ProfileProviderApi.clearVisitorNotes"
        binaryMessenger:binaryMessenger
        codec:ProfileProviderApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearVisitorNotesWithError:)], @"ProfileProviderApi api (%@) doesn't respond to @selector(clearVisitorNotesWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearVisitorNotesWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ProfileProviderApi.clearVisitorInfo"
        binaryMessenger:binaryMessenger
        codec:ProfileProviderApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearVisitorInfoWithError:)], @"ProfileProviderApi api (%@) doesn't respond to @selector(clearVisitorInfoWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearVisitorInfoWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
