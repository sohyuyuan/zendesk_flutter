// Autogenerated from Pigeon (v3.2.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

/// Generated class from Pigeon that represents data sent in messages.
struct SetLoggableRequest {
  var loggable: Bool

  static func fromMap(_ map: [String: Any?]) -> SetLoggableRequest? {
    let loggable = map["loggable"] as! Bool

    return SetLoggableRequest(
      loggable: loggable
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "loggable": loggable
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SupportSDKInitializeRequest {
  var zendeskUrl: String
  var appId: String
  var clientId: String

  static func fromMap(_ map: [String: Any?]) -> SupportSDKInitializeRequest? {
    let zendeskUrl = map["zendeskUrl"] as! String
    let appId = map["appId"] as! String
    let clientId = map["clientId"] as! String

    return SupportSDKInitializeRequest(
      zendeskUrl: zendeskUrl,
      appId: appId,
      clientId: clientId
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "zendeskUrl": zendeskUrl,
      "appId": appId,
      "clientId": clientId
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ChatSDKV2InitializeRequest {
  var accountKey: String
  var appId: String
  var pushToken: String

  static func fromMap(_ map: [String: Any?]) -> ChatSDKV2InitializeRequest? {
    let accountKey = map["accountKey"] as! String
    let appId = map["appId"] as! String
    let pushToken = map["pushToken"] as! String

    return ChatSDKV2InitializeRequest(
      accountKey: accountKey,
      appId: appId,
      pushToken: pushToken
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "accountKey": accountKey,
      "appId": appId,
      "pushToken": pushToken
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SetVisitorInfoRequest {
  var name: String? = nil
  var email: String? = nil
  var phoneNumber: String? = nil

  static func fromMap(_ map: [String: Any?]) -> SetVisitorInfoRequest? {
    let name = map["name"] as? String 
    let email = map["email"] as? String 
    let phoneNumber = map["phoneNumber"] as? String 

    return SetVisitorInfoRequest(
      name: name,
      email: email,
      phoneNumber: phoneNumber
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "name": name,
      "email": email,
      "phoneNumber": phoneNumber
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct VisitorTagsRequest {
  var tags: [String?]

  static func fromMap(_ map: [String: Any?]) -> VisitorTagsRequest? {
    let tags = map["tags"] as! [String?]

    return VisitorTagsRequest(
      tags: tags
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "tags": tags
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct VisitorNoteRequest {
  var note: String

  static func fromMap(_ map: [String: Any?]) -> VisitorNoteRequest? {
    let note = map["note"] as! String

    return VisitorNoteRequest(
      note: note
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "note": note
    ]
  }
}
private class ZendeskSDKApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return SetLoggableRequest.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class ZendeskSDKApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SetLoggableRequest {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class ZendeskSDKApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ZendeskSDKApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ZendeskSDKApiCodecWriter(data: data)
  }
}

class ZendeskSDKApiCodec: FlutterStandardMessageCodec {
  static let shared = ZendeskSDKApiCodec(readerWriter: ZendeskSDKApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ZendeskSDKApi {
  func setLoggable(request: SetLoggableRequest)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ZendeskSDKApiSetup {
  /// The codec used by ZendeskSDKApi.
  static var codec: FlutterStandardMessageCodec { ZendeskSDKApiCodec.shared }
  /// Sets up an instance of `ZendeskSDKApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ZendeskSDKApi?) {
    let setLoggableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ZendeskSDKApi.setLoggable", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLoggableChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! SetLoggableRequest
        api.setLoggable(request: requestArg)
        reply(nil)
      }
    } else {
      setLoggableChannel.setMessageHandler(nil)
    }
  }
}
private class SupportSDKApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return SupportSDKInitializeRequest.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class SupportSDKApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SupportSDKInitializeRequest {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class SupportSDKApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SupportSDKApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SupportSDKApiCodecWriter(data: data)
  }
}

class SupportSDKApiCodec: FlutterStandardMessageCodec {
  static let shared = SupportSDKApiCodec(readerWriter: SupportSDKApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SupportSDKApi {
  func initializeSupportSDK(request: SupportSDKInitializeRequest)
  func setAnonymousIdentity()
  func showHelpCenter()
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SupportSDKApiSetup {
  /// The codec used by SupportSDKApi.
  static var codec: FlutterStandardMessageCodec { SupportSDKApiCodec.shared }
  /// Sets up an instance of `SupportSDKApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SupportSDKApi?) {
    let initializeSupportSDKChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SupportSDKApi.initializeSupportSDK", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeSupportSDKChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! SupportSDKInitializeRequest
        api.initializeSupportSDK(request: requestArg)
        reply(nil)
      }
    } else {
      initializeSupportSDKChannel.setMessageHandler(nil)
    }
    let setAnonymousIdentityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SupportSDKApi.setAnonymousIdentity", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAnonymousIdentityChannel.setMessageHandler { _, reply in
        api.setAnonymousIdentity()
        reply(nil)
      }
    } else {
      setAnonymousIdentityChannel.setMessageHandler(nil)
    }
    let showHelpCenterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SupportSDKApi.showHelpCenter", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showHelpCenterChannel.setMessageHandler { _, reply in
        api.showHelpCenter()
        reply(nil)
      }
    } else {
      showHelpCenterChannel.setMessageHandler(nil)
    }
  }
}
private class ChatSDKV2ApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return ChatSDKV2InitializeRequest.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class ChatSDKV2ApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ChatSDKV2InitializeRequest {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class ChatSDKV2ApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ChatSDKV2ApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ChatSDKV2ApiCodecWriter(data: data)
  }
}

class ChatSDKV2ApiCodec: FlutterStandardMessageCodec {
  static let shared = ChatSDKV2ApiCodec(readerWriter: ChatSDKV2ApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ChatSDKV2Api {
  func initializeChatSDK(request: ChatSDKV2InitializeRequest)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ChatSDKV2ApiSetup {
  /// The codec used by ChatSDKV2Api.
  static var codec: FlutterStandardMessageCodec { ChatSDKV2ApiCodec.shared }
  /// Sets up an instance of `ChatSDKV2Api` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ChatSDKV2Api?) {
    let initializeChatSDKChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ChatSDKV2Api.initializeChatSDK", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChatSDKChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! ChatSDKV2InitializeRequest
        api.initializeChatSDK(request: requestArg)
        reply(nil)
      }
    } else {
      initializeChatSDKChannel.setMessageHandler(nil)
    }
  }
}
private class ProfileProviderApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return SetVisitorInfoRequest.fromMap(self.readValue() as! [String: Any])      
      case 129:
        return VisitorNoteRequest.fromMap(self.readValue() as! [String: Any])      
      case 130:
        return VisitorTagsRequest.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class ProfileProviderApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SetVisitorInfoRequest {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else if let value = value as? VisitorNoteRequest {
      super.writeByte(129)
      super.writeValue(value.toMap())
    } else if let value = value as? VisitorTagsRequest {
      super.writeByte(130)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class ProfileProviderApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ProfileProviderApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ProfileProviderApiCodecWriter(data: data)
  }
}

class ProfileProviderApiCodec: FlutterStandardMessageCodec {
  static let shared = ProfileProviderApiCodec(readerWriter: ProfileProviderApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ProfileProviderApi {
  func setVisitorInfo(request: SetVisitorInfoRequest)
  func addVisitorTags(request: VisitorTagsRequest)
  func removeVisitorTags(request: VisitorTagsRequest)
  func setVisitorNote(request: VisitorNoteRequest)
  func appendVisitorNote(request: VisitorNoteRequest)
  func clearVisitorNotes()
  func clearVisitorInfo()
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ProfileProviderApiSetup {
  /// The codec used by ProfileProviderApi.
  static var codec: FlutterStandardMessageCodec { ProfileProviderApiCodec.shared }
  /// Sets up an instance of `ProfileProviderApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ProfileProviderApi?) {
    let setVisitorInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ProfileProviderApi.setVisitorInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setVisitorInfoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! SetVisitorInfoRequest
        api.setVisitorInfo(request: requestArg)
        reply(nil)
      }
    } else {
      setVisitorInfoChannel.setMessageHandler(nil)
    }
    let addVisitorTagsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ProfileProviderApi.addVisitorTags", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addVisitorTagsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! VisitorTagsRequest
        api.addVisitorTags(request: requestArg)
        reply(nil)
      }
    } else {
      addVisitorTagsChannel.setMessageHandler(nil)
    }
    let removeVisitorTagsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ProfileProviderApi.removeVisitorTags", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeVisitorTagsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! VisitorTagsRequest
        api.removeVisitorTags(request: requestArg)
        reply(nil)
      }
    } else {
      removeVisitorTagsChannel.setMessageHandler(nil)
    }
    let setVisitorNoteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ProfileProviderApi.setVisitorNote", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setVisitorNoteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! VisitorNoteRequest
        api.setVisitorNote(request: requestArg)
        reply(nil)
      }
    } else {
      setVisitorNoteChannel.setMessageHandler(nil)
    }
    let appendVisitorNoteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ProfileProviderApi.appendVisitorNote", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      appendVisitorNoteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! VisitorNoteRequest
        api.appendVisitorNote(request: requestArg)
        reply(nil)
      }
    } else {
      appendVisitorNoteChannel.setMessageHandler(nil)
    }
    let clearVisitorNotesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ProfileProviderApi.clearVisitorNotes", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearVisitorNotesChannel.setMessageHandler { _, reply in
        api.clearVisitorNotes()
        reply(nil)
      }
    } else {
      clearVisitorNotesChannel.setMessageHandler(nil)
    }
    let clearVisitorInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ProfileProviderApi.clearVisitorInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearVisitorInfoChannel.setMessageHandler { _, reply in
        api.clearVisitorInfo()
        reply(nil)
      }
    } else {
      clearVisitorInfoChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
